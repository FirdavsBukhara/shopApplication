package uz.pdp.shopapplication.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import uz.pdp.shopapplication.service.impl.CustomUserDetailsService;

import java.io.IOException;

@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtTokenProvider jwtTokenProvider;
    private final CustomUserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String uri = request.getRequestURI();
        System.out.println("üîπ JwtFilter START ‚Äî URI: " + uri);

// ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ multipart-–∑–∞–ø—Ä–æ—Å—ã
        if (uri.startsWith("/auth/login") ||
                uri.startsWith("/auth/register") ||
                uri.startsWith("/css") ||
                uri.startsWith("/js") ||
                uri.startsWith("/images") ||
                uri.startsWith("/uploads") ||                // ‚úÖ –ø–∞–ø–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
//                uri.startsWith("/api/products/upload") ||    // ‚úÖ multipart upload
                uri.equals("/") ||
                uri.endsWith(".html")) {

            System.out.println("üü¢ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: " + uri);
            filterChain.doFilter(request, response);
            return;
        }

        // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
        String header = request.getHeader("Authorization");
        System.out.println("üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization...");
        System.out.println("üî∏ Header = " + header);

        if (header == null || !header.startsWith("Bearer ")) {
            System.out.println("üö´ –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π");
            filterChain.doFilter(request, response);
            return;
        }

        String token = header.substring(7);
        System.out.println("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: " + token);

        try {
            if (jwtTokenProvider.validateToken(token)) {
                String username = jwtTokenProvider.getUsernameFromToken(token);
                System.out.println("üë§ –ò–∑ —Ç–æ–∫–µ–Ω–∞ –∏–∑–≤–ª–µ—á—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username);

                if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                    UserDetails userDetails = userDetailsService.loadUserByUsername(username);

                    var auth = new UsernamePasswordAuthenticationToken(
                            userDetails,
                            null,
                            userDetails.getAuthorities()
                    );
                    SecurityContextHolder.getContext().setAuthentication(auth);
                    System.out.println("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
                }
            } else {
                System.out.println("üö´ –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
        }

        filterChain.doFilter(request, response);
        System.out.println("üîπ JwtFilter END ‚Äî URI: " + uri);
    }
}
